/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FlashLoanArbitrageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_DENOMINATOR"
      | "MIN_PROFIT_BPS"
      | "checkProfitability"
      | "emergencyWithdraw"
      | "executeArbitrage"
      | "owner"
      | "receiveFlashLoan"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ArbitrageExecuted" | "PriceChecked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROFIT_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkProfitability",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeArbitrage",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveFlashLoan",
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROFIT_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkProfitability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeArbitrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFlashLoan",
    data: BytesLike
  ): Result;
}

export namespace ArbitrageExecutedEvent {
  export type InputTuple = [
    tokens: AddressLike[],
    amounts: BigNumberish[],
    profit: BigNumberish
  ];
  export type OutputTuple = [
    tokens: string[],
    amounts: bigint[],
    profit: bigint
  ];
  export interface OutputObject {
    tokens: string[];
    amounts: bigint[];
    profit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceCheckedEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    uniswapPrice: BigNumberish,
    sushiswapPrice: BigNumberish
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    uniswapPrice: bigint,
    sushiswapPrice: bigint
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    uniswapPrice: bigint;
    sushiswapPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashLoanArbitrage extends BaseContract {
  connect(runner?: ContractRunner | null): FlashLoanArbitrage;
  waitForDeployment(): Promise<this>;

  interface: FlashLoanArbitrageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MIN_PROFIT_BPS: TypedContractMethod<[], [bigint], "view">;

  checkProfitability: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amount: BigNumberish,
      uniswapFee: BigNumberish
    ],
    [[boolean, bigint]],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  executeArbitrage: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amount: BigNumberish,
      uniswapFee: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  receiveFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROFIT_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkProfitability"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amount: BigNumberish,
      uniswapFee: BigNumberish
    ],
    [[boolean, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeArbitrage"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amount: BigNumberish,
      uniswapFee: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveFlashLoan"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ArbitrageExecuted"
  ): TypedContractEvent<
    ArbitrageExecutedEvent.InputTuple,
    ArbitrageExecutedEvent.OutputTuple,
    ArbitrageExecutedEvent.OutputObject
  >;
  getEvent(
    key: "PriceChecked"
  ): TypedContractEvent<
    PriceCheckedEvent.InputTuple,
    PriceCheckedEvent.OutputTuple,
    PriceCheckedEvent.OutputObject
  >;

  filters: {
    "ArbitrageExecuted(address[],uint256[],uint256)": TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;
    ArbitrageExecuted: TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;

    "PriceChecked(address,address,uint256,uint256)": TypedContractEvent<
      PriceCheckedEvent.InputTuple,
      PriceCheckedEvent.OutputTuple,
      PriceCheckedEvent.OutputObject
    >;
    PriceChecked: TypedContractEvent<
      PriceCheckedEvent.InputTuple,
      PriceCheckedEvent.OutputTuple,
      PriceCheckedEvent.OutputObject
    >;
  };
}
